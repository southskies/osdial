#!/usr/bin/perl
#
# Copyright (C) 2009  Lott Caskey <lottcaskey@gmail.com>   LICENSE: AGPLv3
#
# agi-OSDivr.agi
# 
# This is a rework of the OutboundIVR to make IVR menus both Inbound/Outbound compaitible.
# 
# CHANGELOG
# 090601-1120 - Initial build
#

$|++;

use strict;
use OSDial;
use Time::HiRes qw(gettimeofday usleep sleep setitimer time ITIMER_REAL);

$SIG{HUP} = 'exit_now';
$SIG{INT} = 'exit_now';
$SIG{PIPE} = 'exit_now';
$SIG{QUIT} = 'exit_now';
$SIG{ALRM} = sub { print "ERROR: agi-OSDivr.agi timout after 3600 seconds.\n"; exit 255; };
setitimer(ITIMER_REAL, 3600);

my $prog = 'agi-OSDivr.agi';
my $DB = 3;


my $live_agents = {};
my $auto_calls = {};
my $campaign = {};
my $ivr = {};
my $cinfo = {};

# Get OSD configuration directives.
my $osdial = OSDial->new('DB'=>$DB);
$osdial->AGI($prog);
my $AGI = $osdial->AGI();

$osdial->agi_output("+++++ ODOI START : " . $osdial->{server}{asterisk_version},1);


# Grab some time values.
$cinfo->{start_epoch} = time();
$cinfo->{start_date} = $osdial->get_datetime($cinfo->{start_epoch});
$cinfo->{CIDdate} = substr($cinfo->{start_date},4);
$cinfo->{CIDdate} =~ s/\D//g;

$AGI->{orig_accountcode} = $AGI->{accountcode};
$AGI->{orig_channel} = $AGI->{channel};
$AGI->{orig_uniqueid} = $AGI->{uniqueid};

my $latry = 5;
while ($latry > 0) {
	my $sret = $osdial->sql_query("SELECT SQL_NO_CACHE * FROM osdial_live_agents WHERE callerid='" . $AGI->{accountcode} . "' LIMIT 1;");
	if ($sret->{live_agent_id} > 0) {
		$live_agents = $sret;
		$latry=0;
	} else {
		$live_agents=undef;
		sleep 1;
		$latry--;
	}
}
unless ($live_agents) {
	$osdial->agi_output("+++++ ODOI Exiting : No live agents.",1);
	exit 1;
}
$AGI->{accountcode} = $live_agents->{callerid};
$AGI->{channel} = $live_agents->{channel};
$AGI->{uniqueid} = $live_agents->{uniqueid};
$cinfo->{campaign_id} = $live_agents->{campaign_id};

$cinfo->{conf_exten} = $live_agents->{conf_exten};
my @scsip = split(/\./,$live_agents->{server_ip});
my $csip = sprintf('%3.3d*%3.3d*%3.3d*%3.3d', @scsip);
$cinfo->{conf_server} = $csip if ($osdial->{'VARserver_ip'} ne $live_agents->{server_ip});

my $random = int( rand(9999999)) + 10000000;
$osdial->sql_execute("UPDATE osdial_live_agents SET channel='" . $AGI->{orig_channel} . "',status='INCALL',random_id='" . $random . "',last_call_time='" . $cinfo->{start_date} . "' WHERE callerid='" . $AGI->{accountcode} . "' LIMIT 1;");
$osdial->sql_execute("UPDATE osdial_auto_calls SET channel='" . $AGI->{orig_channel} . "' WHERE callerid='" . $AGI->{accountcode} . "' LIMIT 1;");

$cinfo->{CIDlead_id} = (substr($AGI->{accountcode}, 11, 9) + 0);

### Grab call parameters from osdial_auto_calls table
$auto_calls = $osdial->sql_query("SELECT SQL_NO_CACHE * FROM osdial_auto_calls WHERE callerid='" . $AGI->{accountcode} . "' ORDER BY call_time DESC LIMIT 1;");

### Grab campaign values from the database
$campaign = $osdial->sql_query("SELECT * FROM osdial_campaigns WHERE campaign_id='" . $cinfo->{campaign_id} . "';");

update_status('VPU',$ivr->{announcement});


# Pull the auto-agent ivr config.
my $ivr = $osdial->sql_query("SELECT * FROM osdial_ivr WHERE campaign_id='" . $campaign->{campaign_id} . "';");
unless ($ivr) {
	$osdial->agi_output("+++++ ODOI : NO OUTBOUND IVR FOUND FOR THIS CAMPAIGN: EXITING");
	exit;
}

$AGI->answer();

$ivr->{ivrid} = $ivr->{id};
$ivr->{parid} = 0;
ivr_menu($ivr);

exit_now();






################################################################

sub exit_now {
	my($sig) = @_;
	$SIG{HUP} = 'IGNORE';
	$SIG{INT} = 'IGNORE';
	$SIG{PIPE} = 'IGNORE';
	$SIG{QUIT} = 'IGNORE';
	$SIG{ALRM} = sub { print "ERROR: agi-OSDivr.agi timout on exit after 5 seconds.\n"; exit 255; };
	setitimer(ITIMER_REAL, 5);
	hangup_and_dispo();
	$osdial->agi_output("--    ODOI END - $sig");
	exit;
}


sub ivr_menu {
	my ($menuref) = @_;
	my $ivrloop = 1;
	my $totloop = 0;
	my %menu = %{$menuref};
	$osdial->agi_output("+++++ ODOI MENU : " . $menu{ivrid} . "/" . $menu{parid});
	update_status($menu{answered_status},$menu{announcement});
	while ($ivrloop) {
		# Get valid-digits from options table.
		my $valid_digits;
		my $agtext = 0;
		my $maxlen=1;
		while (my $ivrref = $osdial->sql_query("SELECT * FROM osdial_ivr_options WHERE ivr_id='" . $menu{ivrid} . "' AND parent_id='" . $menu{parid} . "';")) {
			if ($ivrref->{keypress} eq 'A') {
				$agtext = 1;
				my @t1 = split(/#:#/,$ivrref->{action_data});
				foreach my $t2 (split(/\|/,$t1[2])) {
					my($user,$ext) = split(/:/,$t2);
					$maxlen=length($ext) if (length($ext)>$maxlen);
					my $dkey = 'key' . $ext;
					$menu{$dkey}{action} = 'AGENT_EXTENSIONS';
					$menu{$dkey}{action_data} = join('#:#', (0, $t1[1], 'A2A_'.$user, 'NONE', 0));
				}
			} else {
				my $dkey = 'key' . $ivrref->{keypress};
				$menu{$dkey} = $ivrref; 
				$valid_digits .= $ivrref->{keypress};
				if ($menu{$dkey}{'action'} =~ /PLAYFILE|XFER_INGROUP|XFER_EXTERNAL|HANGUP/) {
					my @aparams = split(/#:#/,$menu{$dkey}{action_data});
					$aparams[0] = $aparams[0] if ($aparams[0] ne '');
					$menu{$dkey}{'action_data'} = join('#:#',@aparams);
				}
			}
		}
		$valid_digits='0123456789#*' if ($agtext);
		$osdial->agi_output("+++++ ODOI VALID DIGITS : $valid_digits");
	
		my $exitdigit='';
		$exitdigit='#' unless (defined $menu{'key#'});
		my $dtmf = stream_and_get_dtmf($menu{announcement},$maxlen,$menu{repeat_loops},$menu{wait_loops},$menu{wait_timeout},$menu{timeout_action},$valid_digits,1,$exitdigit);
		$osdial->agi_output("+++++ ODOI STATUS : pressed $dtmf");
	
		my $dkey = 'key';
		my $invalid = 0;
		if ($dtmf ne '') {
			if (defined $menu{$dkey.$dtmf}) {
				$dkey .= $dtmf;
			} elsif (defined $menu{$dkey.'i'}) {
				$dkey .= 'i';
			} else {
				$invalid++;
			}
		} else {
			my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_sip_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension LIKE '%" . $cinfo->{conf_exten} . "%' ORDER BY channel DESC;");
			$ivrloop = 0 if ($sres->{cnt} == 0);
			my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension='" . $cinfo->{conf_exten} . "' ORDER BY channel DESC;");
			$ivrloop = 0 if ($sres->{cnt} == 0);
		}

		if ($invalid) {
			$ivrloop = playfile('invalid','VTO',1);
			$ivrloop = 0 if ($totloop >= $menu{repeat_loops});
		} else {
			my @aparams = split(/#:#/,$menu{$dkey}{action_data});
	
			if ($menu{$dkey}{action} eq "PLAYFILE") {
				$ivrloop = playfile(@aparams);
			} elsif ($menu{$dkey}{action} eq "PLAYFILE_FIELD") {
				$ivrloop = playfile_field(@aparams);
			} elsif ($menu{$dkey}{action} eq "XFER_EXTERNAL") {
				$ivrloop = xfer_to_external(@aparams);
			} elsif ($menu{$dkey}{action} eq "XFER_EXTERNAL_MULTI") {
				$ivrloop = xfer_to_external_multi($menu{$dkey}{id}, $menu{$dkey}{last_state}, @aparams);
			} elsif ($menu{$dkey}{action} eq "XFER_AGENT") {
				$ivrloop = xfer_to_agent(@aparams);
			} elsif ($menu{$dkey}{action} eq "XFER_INGROUP") {
				$ivrloop = xfer_to_ingroup(@aparams);
			} elsif ($menu{$dkey}{action} eq "AGENT_EXTENSIONS") {
				$ivrloop = xfer_to_ingroup(@aparams);
			} elsif ($menu{$dkey}{action} eq "HANGUP") {
				$ivrloop = hangup_and_dispo(@aparams);
			} elsif ($menu{$dkey}{action} eq "TVC_LOOKUP") {
				$ivrloop = tvc_lookup_xfer(@aparams);
			} elsif ($menu{$dkey}{action} eq "MENU") {
				my $submenuref = {};
				$submenuref->{ivrid} = $menu{ivrid};
				$submenuref->{parid} = $menu{$dkey}{id};
				shift @aparams;
				shift @aparams;
				$submenuref->{announcement} = shift @aparams;
				$submenuref->{repeat_loops} = shift @aparams;
				$submenuref->{wait_loops} = shift @aparams;
				$submenuref->{wait_timeout} = shift @aparams;
				$submenuref->{answered_status} = shift @aparams;
				$submenuref->{timeout_action} = shift @aparams;
				$ivrloop = ivr_menu($submenuref);
			} elsif ($menu{$dkey}{action} eq "MENU_REPEAT") {
				$ivrloop = 1;
			} elsif ($menu{$dkey}{action} eq "MENU_EXIT") {
				$ivrloop = playfile('goodbye','VTO',0);
			} else {
				$ivrloop = playfile('goodbye','VTO',0);
			}
		}
		$totloop++;
		update_status();
	}
	return $ivrloop;
}



sub update_status {
	my ($status, $comment) = @_;

	$osdial->sql_connect('B');

	my $upsql;
	$upsql = "status='$status'" if ($status ne '');
	$upsql = "comments='$comment'" if ($comment ne '');
	$upsql = "status='$status',comments='$comment'" if ($status ne '' and $comment ne '');

	if ($status or $comment) {
		my $affected_rows = $osdial->sql_execute("UPDATE osdial_list set $upsql where lead_id='" . $cinfo->{CIDlead_id} . "';",'B');
		$osdial->agi_output("--    ODOI osdial_list update: |$affected_rows|" . $upsql);

		$affected_rows = $osdial->sql_execute("UPDATE osdial_log set $upsql where uniqueid='" . $AGI->{uniqueid} . "';",'B');
		if ($affected_rows < 1) {
			my $affected_rows = $osdial->sql_execute("UPDATE osdial_closer_log set $upsql where uniqueid='" . $AGI->{uniqueid} . "';",'B');
			$osdial->agi_output("--    ODOI osdial_closer_log update: |$affected_rows");
		} else {
			$osdial->agi_output("--    ODOI osdial_log update: |$affected_rows");
		}
	}

	my $xepoch = time();
	my $xdate = $osdial->get_datetime($xepoch);
	$osdial->sql_execute("UPDATE osdial_auto_calls set last_update_time='$xdate' where channel LIKE '%" . $cinfo->{conf_exten} . "%';",'B');

	$osdial->sql_disconnect('B');

	return 1;
}

sub playfile {
	my ($stream, $status, $rtnmain) = @_;

	update_status($status);
	$stream =~ s/\..*$//;
	$osdial->agi_output("ODOI: playing file $stream|");
	$AGI->stream_file($stream);

	return $rtnmain;
}

sub playfile_field {
	my ($field, $status, $hangup_after) = @_;
	$field = 'custom1' if ($field eq '');

	my $lead = $osdial->sql_query(sprintf("SELECT * FROM osdial_list WHERE lead_id='%s';",$cinfo->{CIDlead_id}));
	my $stream = $lead->{$field};
	if ($hangup_after eq 'Y') {
		hangup_and_dispo($stream,$status);
	} else {
		playfile($stream,$status);
	}
		
	return 0;
}

sub xfer_to_external {
	my ($stream, $status, $number) = @_;

	$stream =~ s/\..*$//;
	$stream = 'pls-wait-connect-call' unless ($stream);
	$AGI->stream_file($stream) if ($stream);

	update_status($status);

	my $xepoch = time();
	my $xdate = $osdial->get_datetime($xepoch);
	my $call_length = $xepoch - $cinfo->{start_time};

	$osdial->agi_output("ODOI: transferring call to $number|");
	my $VqueryCID = $AGI->{accountcode};
	my $XqueryCID = $VqueryCID;
	$XqueryCID =~ s/^V/X/;
	my $IqueryCID = $VqueryCID;
	$IqueryCID =~ s/^V/I/;
	my $lead = $osdial->sql_query(sprintf("SELECT * FROM osdial_list WHERE lead_id='%s';",$cinfo->{CIDlead_id}));
	my $cidname=$campaign->{campaign_cid_name};
	my $cidnum=$campaign->{campaign_cid};
	if ($campaign->{xfer_cid_mode} eq "LEAD_CUSTOM1") {
		$cidname=$lead->{custom1};
		$cidnum=$lead->{custom1};
	} elsif ($campaign->{xfer_cid_mode} eq "LEAD_CUSTOM2") {
		$cidname=$lead->{custom2};
		$cidnum=$lead->{custom2};
	} elsif ($campaign->{xfer_cid_mode} eq "LEAD") {
		$cidname=$lead->{phone_number};
		$cidnum=$lead->{phone_number};
	}
	my $xfer = $osdial->sql_execute("INSERT INTO osdial_manager values('','','$xdate','NEW','N','" . $osdial->{VARserver_ip} . "','','Originate','$XqueryCID','Channel: Local/" . $cinfo->{conf_server} . "8" . $cinfo->{conf_exten} . "\@" . $osdial->{server}{ext_context} . "','Context: " . $osdial->{server}{ext_context} . "','Exten: $number','Priority: 1','Callerid: \"" . $cidname . "\" <" . $cidnum . ">','Account: $XqueryCID','','','','');");
	while ($xfer) {
		sleep(1);
		my $sret = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM osdial_manager WHERE (callerid='$XqueryCID' OR callerid='$IqueryCID') AND status='DEAD';");
		$xfer=0 if ($sret->{cnt} == 1);
		my $sret = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_sip_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension='" . $cinfo->{conf_exten} . "' ORDER BY channel DESC;");
		$xfer=0 if ($sret->{cnt} == 0);
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension='" . $cinfo->{conf_exten} . "' ORDER BY channel DESC;");
		$xfer = 0 if ($sres->{cnt} == 0);
		my $xepoch = time();
		my $xdate = $osdial->get_datetime($xepoch);
		$osdial->sql_execute("UPDATE osdial_auto_calls set last_update_time='$xdate' where channel LIKE '%" . $cinfo->{conf_exten} . "%';");
	}
	$osdial->agi_output("exiting the ODOI app");

	# The call should be well on its way to being transferred
	return 0;
}

sub xfer_to_external_multi {
	my ($ivro_id, $last_state, $stream, $status, $method, @numbers) = @_;
	
	# stream and status will get handled when passed to xfer_to_external.
	my $number;

	if ($method eq "RANDOM") {
		# Grab a random number from the stack.
		$number = $numbers[int(rand(scalar(@numbers)))];
	} else {
		# Round-Robin.
		my %robin;
		my $pos = 0;
		my $rrcnt = 0;
		foreach my $num (@numbers) {
			$robin{$num} = $rrcnt++;
		}
		$pos = $robin{$last_state} if ($last_state);
		$pos++;
		$pos = 0 if ($pos >= $rrcnt);
		$number = $numbers[$pos];

		$osdial->sql_execute("UPDATE osdial_ivr_options SET last_state='$number' WHERE id='$ivro_id';");
	}
	return xfer_to_external($stream, $status, $number);
}

# Depricated, to be replaced by xfer_to_ingroup
sub xfer_to_agent {
	return 1;
}
# The new xfer_to_ingroup
# For transfering to an ingroup.
#   If failover_method = NONE or ''
#     The call routed directly to the ingroup.
#   If failover_method = EXT_NA
#     The call routed directly to the failover_number if no agents in ingroup are present.
#   If failover_method = EXT_UA
#     The call routed directly to the failover_number if no agents in ingroup are present or available.
sub xfer_to_ingroup {
	my ($stream, $status, $ingroup, $failover_method, $failover_number) = @_;

	$stream =~ s/\..*$//;
	$stream = 'pls-wait-connect-call' unless ($stream);
	$AGI->stream_file($stream) if ($stream);

	update_status($status);

	my $xepoch = time();
	my $xdate = $osdial->get_datetime($xepoch);
	my $call_length = $xepoch - $cinfo->{start_time};

    	my $number = '';;
    	if ($failover_method eq 'EXT_NA') {
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM osdial_live_agents WHERE closer_campaigns LIKE '% $ingroup %';");
        	if ($sres->{cnt} < 1) {
            	# no agents logged in, send to failover_number
            	$number = $failover_number;
        	}
    	} elsif ($failover_method eq 'EXT_UA') {
        	my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM osdial_live_agents WHERE closer_campaigns LIKE '% $ingroup %' AND uniqueid<'1';");
        	if ($sres->{cnt} < 1) {
            	# no agents logged in or they are unavailable, send to failover_number
            	$number = $failover_number;
        	}
    	}
    	if ($number eq '') {
        	$number = "90009*" . $ingroup . "*8301*" . $cinfo->{CIDlead_id} . "*park*" . $AGI->{'accountcode'} . "**";
    	}

	$osdial->agi_output("ODOI: transferring call to $number|" . $cinfo->{conf_exten});
	my $VqueryCID = $AGI->{accountcode};
	my $XqueryCID = $VqueryCID;
	$XqueryCID =~ s/^V/I/;
	my $lead = $osdial->sql_query(sprintf("SELECT * FROM osdial_list WHERE lead_id='%s';",$cinfo->{CIDlead_id}));
	my $cidname=$campaign->{campaign_cid_name};
	my $cidnum=$campaign->{campaign_cid};
	if ($campaign->{xfer_cid_mode} eq "LEAD_CUSTOM1") {
		$cidname=$lead->{custom1};
		$cidnum=$lead->{custom1};
	} elsif ($campaign->{xfer_cid_mode} eq "LEAD_CUSTOM2") {
		$cidname=$lead->{custom2};
		$cidnum=$lead->{custom2};
	} elsif ($campaign->{xfer_cid_mode} eq "LEAD") {
		$cidname=$lead->{phone_number};
		$cidnum=$lead->{phone_number};
	}
	my $xfer = $osdial->sql_execute("INSERT INTO osdial_manager values('','','$xdate','NEW','N','" . $osdial->{VARserver_ip} . "','','Originate','$XqueryCID','Channel: Local/" . $cinfo->{conf_server} . "8" . $cinfo->{conf_exten} . "\@" . $osdial->{server}{ext_context} . "','Context: " . $osdial->{server}{ext_context} . "','Exten: $number','Priority: 1','Callerid: \"" . $cidname . "\" <" . $cidnum . ">','Account: $XqueryCID','','','','');");
	while ($xfer) {
		sleep(1);
		my $xfer1=1;
		my $xfer2=1;
		my $xfer3=1;
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM osdial_manager WHERE callerid='$XqueryCID' AND status='DEAD';");
		$xfer1=0 if ($sres->{cnt} == 1);
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_sip_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension LIKE '%" . $cinfo->{conf_exten} . "%' ORDER BY channel DESC;");
		$xfer2 = 0 if ($sres->{cnt} == 0);
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS cnt FROM live_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension='" . $cinfo->{conf_exten} . "' ORDER BY channel DESC;");
		$xfer3 = 0 if ($sres->{cnt} == 0);
		$xfer=$xfer1+$xfer2+$xfer3;
		my $xepoch = time();
		my $xdate = $osdial->get_datetime($xepoch);
		$osdial->sql_execute("UPDATE osdial_auto_calls SET last_update_time='$xdate' WHERE channel LIKE '%" . $cinfo->{conf_exten} . "%';");
	}
	$osdial->agi_output("exiting the ODOI xfer_to_ingroup");

	# The call should be well on its way to being transferred
	return 0;
}



sub hangup_and_dispo {
	my ($stream, $status) = @_;;

	$stream =~ s/\..*$//;
	$AGI->stream_file($stream) if ($stream);

	my $tepoch = time();
	my $tdate = $osdial->get_datetime($tepoch);
	my $call_length = $tepoch - $cinfo->{start_time};

	my $affected_rows = $osdial->sql_execute("UPDATE osdial_log SET end_epoch='$tepoch' WHERE uniqueid='" . $AGI->{uniqueid} . "';");
	$osdial->agi_output("--    ODOI osdial_log update: $affected_rows");

	my $affected_rows = $osdial->sql_execute("UPDATE osdial_log SET length_in_sec=end_epoch-start_epoch WHERE uniqueid='".$AGI->{uniqueid}."';");
	$osdial->agi_output("--    ODOI osdial_log update: $affected_rows");


	if ($status eq 'DNC' or $status eq 'VDNC') {
		my $affected_rows = $osdial->sql_execute("INSERT INTO osdial_dnc (phone_number) VALUES ((SELECT SQL_NO_CACHE phone_number FROM osdial_list WHERE lead_id='" . $cinfo->{CIDlead_id} ."'));");
		$osdial->agi_output("--    ODOI osdial_dnc insert: |$affected_rows");
	}

	update_status($status);

	### insert a NEW Hangup record to the osdial_manager table to be processed
	my $VHqueryCID = $AGI->{orig_accountcode};
	my @huchan;
	# Get local channels (conferences)
	while (my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE channel FROM live_sip_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND channel LIKE '%" . $cinfo->{conf_exten} . "%' ORDER BY channel DESC;")) {
		push @huchan, $sres->{channel};
	}
	# Get outbound channels attached to those conferences.
	while (my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE channel FROM live_channels WHERE server_ip='" . $osdial->{VARserver_ip} . "' AND extension='" . $cinfo->{conf_exten} . "' ORDER BY channel DESC;")) {
		push @huchan, $sres->{channel};
	}

	# Send hangups to all conferences and outbound channels.
	foreach my $huc (@huchan) {
		$AGI->hangup($huc);
		$osdial->agi_output("--     ODOI Hangup: $huc") if ($DB > 1);
	}
	sleep(1);
	# Go back through and do a SoftHangup on anything still up.
	foreach my $huc (@huchan) {
		my $sres = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS hucnt FROM live_sip_channels WHERE channel='" . $huc . "';");
		my $sres2 = $osdial->sql_query("SELECT SQL_NO_CACHE count(*) AS hucnt FROM live_channels WHERE channel='" . $huc . "';");
		if (($sres->{hucnt} + $sres2->{hucnt}) > 0) {
			$AGI->exec("SoftHangup",$huc);
			$osdial->agi_output("--     ODOI SoftHangup: $huc") if ($DB > 1);
		}
	}

	$AGI->hangup();

	my $affected_rows = $osdial->sql_execute("UPDATE osdial_live_agents SET status='READY',lead_id='0',uniqueid='',callerid='',channel='' WHERE callerid='" . $AGI->{accountcode} . "';");
	$osdial->agi_output("--    ODOI osdial_log update: $affected_rows");

	return 0;
}


#Special lookup from db for TVC
sub tvc_lookup_xfer {
	my ($desc, $status, $stream1, $stream2, $ingroup, $tdbserver, $tdbdatabase, $tdbuser, $tdbpass, $tdbtable, $tdbmaps) = @_;

	return 0 if ($tdbtable eq "" or $tdbmaps eq "");
	$tdbmaps =~ s/ //g;
	my %tmaps;
	my @tflds;
	foreach my $tmap (split(/,/,$tdbmaps)) {
		my @tamap = split(/=/,$tmap);
		$tmaps{$tamap[0]} = $tamap[1];
		if ($tamap[1] =~ /\|/) {
			push @tflds, split(/\|/,$tamap[1]);
		} else {
			push @tflds, $tamap[1];
		}
	}

	$osdial->agi_output("|tvclookup|playback on $stream1|") if ($DB);
	my $s1res = stream_and_get_dtmf($stream1, 10, 3, 10, 1000, 'BAD', '1234567890', 10, '');
	$osdial->agi_output("|tvclookup|got $s1res|") if ($DB);
	return 0 if ($s1res eq "BAD");

	$osdial->agi_output("|tvclookup|playback on $stream2|") if ($DB);
	my $s2res = stream_and_get_dtmf($stream2, 6, 3, 10, 1000, 'BAD', '01234567890', 2, '#');
	$osdial->agi_output("|tvclookup|got $s2res|") if ($DB);
	return 0 if ($s2res eq "BAD");

	$osdial->sql_connect('C',$tdbdatabase,$tdbserver,'3306',$tdbuser,$tdbpass);

	my $qhr = $osdial->sql_query("SELECT SQL_NO_CACHE " . join(',', @tflds) . " FROM $tdbtable WHERE " . $tmaps{'phone_number'} . "='" . $s1res . "' LIMIT 1;",'C');

	foreach my $fld ( keys %{$qhr} ) {
		$qhr->{$fld} =~ s/'"//g;
		$osdial->agi_output("|tvclookup|$fld|" . $qhr->{$fld}) if ($DB);
	}
	my $stmt = "UPDATE osdial_list SET custom1='" . $s2res . "',";
	foreach my $tkey (keys %tmaps) {
		$stmt .= $tkey . "='";
		if ($tmaps{$tkey} =~ /\|/) {
			foreach my $tconcat (split(/\|/,$tmaps{$tkey})) {
				$stmt .= $tconcat . '=' .$qhr->{$tconcat} . "||";
			}
		} else {
			$stmt .= $qhr->{$tmaps{$tkey}};
		}
		$stmt .= "',";
	}
	chop($stmt);
	$stmt .= " WHERE lead_id='" . $cinfo->{CIDlead_id} . "';";
	my $affected_rows = $osdial->sql_execute($stmt);
	$osdial->agi_output("|$stmt|$affected_rows|") if ($DB > 1);

	$osdial->sql_disconnect('C');

	return xfer_to_ingroup(0, $status, $ingroup, 'NONE', 0);
}

sub stream_and_get_dtmf {
	my ($stream, $dcount, $rptloops, $waitloops, $waittimeout, $timeout_action, $valid_digits, $min_digits, $exit_digit) = @_;
	return -1 unless ($stream);
	$dcount = 1 unless ($dcount);
	$rptloops = 3 unless ($rptloops);
	$waitloops = 5 unless ($waitloops);
	$waittimeout = 500 unless ($waittimeout);
	$valid_digits = '0123456789#*' unless ($valid_digits);
	$valid_digits .= $exit_digit if ($exit_digit ne '');
	$valid_digits = ''  if ($valid_digits == -1);
	$min_digits = $dcount if ($min_digits eq '');

	my $orig_dcount = $dcount;
	my $rpt = 0;
	my $total_digits;
	$valid_digits =~ s/\*/\\*/g;
	$valid_digits =~ s/\#/\\#/g;
	my $valid_pat = '[^' . $valid_digits . ']';

	$osdial->agi_output("stream_and_get_dtmf|$stream|$dcount|$rptloops|$waitloops|$waittimeout|$timeout_action|$valid_digits|$min_digits|$exit_digit|") if ($DB);

	while (length($total_digits) < $dcount and $rpt < $rptloops) {

		update_status();

		$total_digits = '';
		$stream =~ s/\..*$//;
		my $interrupt_digit = $AGI->stream_file($stream,'0123456789#*');
		if ($interrupt_digit) {
			my $int_digit=chr($interrupt_digit);
			if (!$int_digit =~ /$valid_pat/) {
				$dcount = 1;
				$orig_dcount = 1;
			}
			$total_digits.=$int_digit;
			$osdial->agi_output("int_digit |$int_digit|   total_digits |$total_digits|") if ($DB);
		}

		my $loop = 0;
		while (length($total_digits) < $dcount and $loop < $waitloops) {
			my $digit = $AGI->wait_for_digit($waittimeout);
			if ($digit>0) {
				$digit = chr($digit);
				$digit =~ s/$valid_pat//g;
				if ($digit ne '') {
					if ($exit_digit ne '' and $exit_digit eq $digit) {
						$dcount = length($total_digits);
						$orig_dcount = length($total_digits);
					} else {
						$total_digits .= $digit;
					}
					$osdial->agi_output("    digit |$digit|   total_digits |$total_digits|") if ($DB);
				}
				$loop=0;
			} else {
				$loop++;
			}
			$loop = $waitloops if (length($total_digits) >= $dcount);
		}

		if (length($total_digits) >= $dcount) {
			$rpt = $rptloops;
		} elsif (length($total_digits) >= $min_digits) {
			$rpt = $rptloops;
		} elsif ($rpt >= $rptloops) {
			$dcount = length($total_digits);
		} else {
			$rpt++;
		}
	}

	if (length($total_digits) == $orig_dcount or length($total_digits) >= $min_digits) {
		return $total_digits;
	} else {
		return $timeout_action;
	}
}





