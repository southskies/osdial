#!/usr/bin/perl
#
# agi-OSDoutbound.agi
#
## Copyright (C) 2009  Lott Caskey  <lottcaskey@gmail.com>    LICENSE: AGPLv3
##
##     This file is part of OSDial.
##
##     OSDial is free software: you can redistribute it and/or modify
##     it under the terms of the GNU Affero General Public License as
##     published by the Free Software Foundation, either version 3 of
##     the License, or (at your option) any later version.
##
##     OSDial is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU Affero General Public License for more details.
##
##     You should have received a copy of the GNU Affero General Public
##     License along with OSDial.  If not, see <http://www.gnu.org/licenses/>.
##

use strict;
use OSDial;
use Time::HiRes ('gettimeofday','usleep','sleep');  # necessary to have perl sleep command of less than one second

my $DB = 0;

my $osd = new OSDial;
$osd->AGI('agi-OSDoutbound.agi');

my $method = 'LB';
$method = 'SO' if ($osd->AGI->{extension} eq '8365');
$method = 'LO' if ($osd->AGI->{extension} eq '8367');
$method = 'LB' if ($osd->AGI->{extension} eq '8368');

my $secX = time();
my $now_date_epoch = $secX;
my $now_date = $osd->get_datetime($now_date_epoch);
my $start_time = $now_date;
my $SQLdate = $now_date;
my $BDtsSQLdate = $osd->get_datetime($secX - 5);
my $CIDdate = $now_date;
$CIDdate =~ s/\D//g;
$CIDdate = substr($CIDdate,4,10);

my $CIDlead_id = $osd->AGI->{accountcode};
$CIDlead_id = substr($CIDlead_id, 11, 9);
$CIDlead_id = ($CIDlead_id + 0);

my ($stmt, $affected_rows);
my ($oac, $campaign, $hopper);

$osd->agi_output("+++++ VDAD START : |$CIDlead_id|$now_date|" . $osd->AGI->{priority} . "|");

if ($osd->AGI->{channel} =~ /Local/i) {
	$osd->agi_output("+++++ VDAD START LOCAL CHANNEL: EXITING- " . $osd->AGI->{priority});
	sleep(1) if ($osd->AGI->{priority} > 2);
	exit;
}

$stmt = sprintf("SELECT count(*) AS count FROM osdial_live_agents WHERE callerid='%s';",$osd->AGI->{accountcode});
$osd->agi_output("|$stmt|") if ($DB);
my $dupchk = $osd->sql_query($stmt);
if ($dupchk->{count} > 0) {
	$osd->agi_output("+++++ VDAD START PSEUDO DUPLICATE: EXITING- " . $osd->AGI->{priority});
	exit;
}

$stmt = sprintf("SELECT count(*) AS count FROM osdial_auto_calls WHERE callerid='%s' AND status IN('LIVE','XFER');",$osd->AGI->{accountcode});
$osd->agi_output("|$stmt|") if ($DB);
my $dupchk = $osd->sql_query($stmt);
if ($dupchk->{count} > 0) {
	$osd->agi_output("+++++ VDAD START DIALPLAN DUPLICATE: EXITING- " . $osd->AGI->{priority});
	exit;
}



### Grab call parameters from osdial_auto_calls table
$stmt = sprintf("UPDATE osdial_auto_calls SET uniqueid='%s',channel='%s',status='LIVE',stage='LIVE-0' WHERE callerid='%s' ORDER BY call_time DESC LIMIT 1;",$osd->AGI->{uniqueid},$osd->AGI->{channel},$osd->AGI->{accountcode});
$osd->agi_output("|$stmt|") if ($DB);
if ($osd->sql_execute($stmt)) {
	$osd->agi_output("--    VDAD : |update of vac table: " . $osd->AGI->{accountcode});

	$stmt = sprintf("SELECT campaign_id,phone_number,phone_code,lead_id,call_time FROM osdial_auto_calls WHERE callerid='%s' ORDER BY call_time DESC LIMIT 1;",$osd->AGI->{accountcode});
	$osd->agi_output("|$stmt|") if ($DB);
	$oac = $osd->sql_query($stmt);

	### Grab campaign values from the database
	$stmt = sprintf("SELECT drop_call_seconds,safe_harbor_message,safe_harbor_exten,concurrent_transfers,next_agent_call,voicemail_ext FROM osdial_campaigns WHERE campaign_id='%s';",$oac->{campaign_id});
	$osd->agi_output("|$stmt|") if ($DB);
	$campaign = $osd->sql_query($stmt);

	$stmt = sprintf("SELECT * FROM osdial_hopper WHERE lead_id='%s';",$oac->{lead_id});
	$osd->agi_output("|$stmt|") if ($DB);
	$hopper = $osd->sql_query($stmt);

	$stmt = sprintf("INSERT INTO osdial_log (uniqueid,lead_id,campaign_id,call_date,start_epoch,status,phone_code,phone_number,user,processed,server_ip) VALUES ('%s','%s','%s','%s','%s','QUEUE','%s','%s','VDAD','N','%s');",$osd->AGI->{uniqueid},$CIDlead_id,$oac->{campaign_id},$SQLdate,$now_date_epoch,$oac->{phone_code},$oac->{phone_number},$osd->{VARserver_ip});
	$osd->agi_output("|$stmt|") if ($DB);
	$osd->sql_execute($stmt);
	$osd->agi_output("--    VDAD : |" . $oac->{lead_id} . "|$CIDlead_id|insert to osdial_log: " . $osd->AGI->{uniqueid});

	######################################
	##### START QUEUEMETRICS LOGGING #####
	if ($osd->{settings}{enable_queuemetrics_logging} > 0) {
		my $data2;
		if (length($osd->{settings}{queuemetrics_eq_prepend}) > 0 and $osd->{settings}{queuemetrics_eq_prepend} ne 'NONE') {
			$stmt = sprintf("SELECT %s AS QMprepend FROM osdial_list where lead_id='%s';",$osd->{settings}{queuemetrics_eq_prepend},$CIDlead_id);
			if (my $res = $osd->sql_query($stmt)) {
				$data2 = $res->{QMprepend} . '-';
			}
		}
		$data2 .= $oac->{phone_number};

		$osd->sql_connect('QM',$osd->{settings}{queuemetrics_dbname},$osd->{settings}{queuemetrics_server_ip},'3306',$osd->{settings}{queuemetrics_login},$osd->{settings}{queuemetrics_pass});
		$stmt = sprintf("INSERT INTO queue_log SET partition='P01',time_id='%s',call_id='%s',queue='%s',agent='NONE',verb='ENTERQUEUE',data2='%s',serverid='%s';",$secX,$osd->AGI->{accountcode},$oac->{campaign_id},$data2,$osd->{settings}{queuemetrics_log_id});
		$osd->sql_disconnect('QM');
	}
	##### END QUEUEMETRICS LOGGING #####
	####################################
}

my $drop_timer=0;
my $drop_seconds=0;

my $agent_call_order='';
$agent_call_order = 'order by user_level desc,last_call_finish' if ($campaign->{next_agent_call} =~ /overall_user_level/i);
$agent_call_order = 'order by last_call_time' if ($campaign->{next_agent_call} =~ /oldest_call_start/i);
$agent_call_order = 'order by last_call_finish' if ($campaign->{next_agent_call} =~ /oldest_call_finish/i);
$agent_call_order = 'order by random_id' if ($campaign->{next_agent_call} =~ /random/i);
$agent_call_order = 'order by campaign_weight desc,last_call_finish' if ($campaign->{next_agent_call} =~ /campaign_rank/i);
$agent_call_order = 'order by calls_today,last_call_finish' if ($campaign->{next_agent_call} =~ /fewest_calls/i);

while ($drop_timer <= $campaign->{drop_call_seconds}) {
	my $channel_status = $osd->AGI->channel_status($osd->AGI->{channel});
	if ($channel_status < 1) {
		$osd->agi_output("CHANNEL " . $osd->AGI->{channel} . " DOWN $channel_status " . $campaign->{drop_call_seconds} . "|$drop_timer CHECKING AGAIN");
		### sleep for 99 hundredths of a second
		usleep(1*990*1000);

		my $channel_status_DC = $osd->AGI->channel_status($osd->AGI->{channel});

		if ($channel_status_DC < 1) {
			$osd->agi_output("CHANNEL " . $osd->AGI->{channel} . " DOWN $channel_status " . $campaign->{drop_call_seconds} . "|$drop_timer");
			$drop_seconds = $drop_timer if ($drop_timer < $campaign->{drop_call_seconds});
			$drop_timer += $campaign->{drop_call_seconds};
		}
	}


	$stmt = sprintf("SELECT count(*) AS count FROM osdial_auto_calls WHERE status='LIVE' AND campaign_id='%s' AND call_time<'%s' AND lead_id!='%s';",$oac->{campaign_id},$oac->{call_time},$oac->{lead_id});
	my $acres = $osd->sql_query($stmt);
	my $rec_countWAIT = $acres->{count};
	$osd->agi_output("|$stmt|") if ($DB);

	if ($campaign->{concurrent_transfers} =~ /AUTO/) {
		my $active_agents=1;
		$stmt = sprintf("SELECT count(*) AS count FROM osdial_live_agents WHERE campaign_id='%s' AND last_update_time>'%s';",$oac->{campaign_id},$BDtsSQLdate);
		my $lares = $osd->sql_query($stmt);
		$active_agents = $lares->{count};
	
		$campaign->{concurrent_transfers} = ($active_agents / 10);
		$campaign->{concurrent_transfers} = sprintf("%.0f", $campaign->{concurrent_transfers});
		$campaign->{concurrent_transfers}++;
		$osd->agi_output("|CONCURRENT TRANSFERS AUTO SETTING: " . $campaign->{concurrent_transfers} . " ($active_agents)|");
	}

	if ($rec_countWAIT < $campaign->{concurrent_transfers}) {
		my $random = int( rand(9999999)) + 10000000;
		my $queued = 0;
		my $hopper_agent = '';
		if ($hopper->{user} ne '' and $hopper->{user} !~ /VDAD/) {
			$hopper_agent = sprintf("AND user='%s'",$hopper->{user});
		}
		if ($method eq 'SO' or $method eq 'LO') {
			$stmt = sprintf("UPDATE osdial_live_agents SET status='QUEUE',random_id='%s',lead_id='%s',uniqueid='%s',channel='%s',call_server_ip='%s',callerid='%s' WHERE status='READY' AND campaign_id='%s' AND last_update_time>'%s' AND server_ip='%s' %s %s LIMIT 1;",$random,$CIDlead_id,$osd->AGI->{uniqueid},$osd->AGI->{channel},$osd->{VARserver_ip},$osd->AGI->{accountcode},$oac->{campaign_id},$BDtsSQLdate,$osd->{VARserver_ip},$hopper_agent,$agent_call_order);
			$queued = $osd->sql_execute($stmt);
			$osd->agi_output("$queued|$stmt|") if ($DB);
			if ($method eq 'LO' and $queued == 0) {
				$stmt = sprintf("UPDATE osdial_live_agents SET status='QUEUE',random_id='%s',lead_id='%s',uniqueid='%s',channel='%s',call_server_ip='%s',callerid='%s' WHERE status='READY' AND campaign_id='%s' AND last_update_time>'%s' AND server_ip!='%s' %s %s LIMIT 1;",$random,$CIDlead_id,$osd->AGI->{uniqueid},$osd->AGI->{channel},$osd->{VARserver_ip},$osd->AGI->{accountcode},$oac->{campaign_id},$BDtsSQLdate,$osd->{VARserver_ip},$hopper_agent,$agent_call_order);
				$queued = $osd->sql_execute($stmt);
			}
		} else {
			$stmt = sprintf("UPDATE osdial_live_agents SET status='QUEUE',random_id='%s',lead_id='%s',uniqueid='%s',channel='%s',call_server_ip='%s',callerid='%s' WHERE status='READY' AND campaign_id='%s' AND last_update_time>'%s' %s %s LIMIT 1;",$random,$CIDlead_id,$osd->AGI->{uniqueid},$osd->AGI->{channel},$osd->{VARserver_ip},$osd->AGI->{accountcode},$oac->{campaign_id},$BDtsSQLdate,$hopper_agent,$agent_call_order);
			$queued = $osd->sql_execute($stmt);
		}
		$osd->agi_output("|$stmt|") if ($DB);
		$osd->agi_output("--    VDAD get agent: |$queued|update of vla table: " . $oac->{campaign_id} . "|" . $osd->{VARserver_ip});
		if ($queued > 0) {
			my $r=0;
			my ($conf_exten,$user,$server_ip);
			while (length($user)<1 and $r<3) {
				$stmt = sprintf("SELECT conf_exten,user,server_ip FROM osdial_live_agents WHERE status IN ('QUEUE','INCALL') AND campaign_id='%s' AND callerid='%s' AND channel='%s' ORDER BY last_call_time LIMIT 1;",$oac->{campaign_id},$osd->AGI->{accountcode},$osd->AGI->{channel});
				my $lares = $osd->sql_query($stmt);
				$conf_exten = $lares->{conf_exten};
				$user = $lares->{user};
				$server_ip = $lares->{server_ip};
				$r++;

				if ($r > 1) {
					$osd->agi_output("EEEEEEEEEE vla UPDATE DELAY!!! |" . $osd->AGI->{accountcode} . "|$r|");
					### sleep for 23 hundredths of a second
					usleep(1*230*1000);
					$drop_timer += 0.25;
				}
				if ($r > 2) {
					$stmt = sprintf("SELECT conf_exten,user,server_ip FROM osdial_live_agents WHERE callerid='%s' ORDER BY last_call_time LIMIT 1;",$osd->AGI->{accountcode});
					my $lares = $osd->sql_query($stmt);
					$conf_exten = $lares->{conf_exten};
					$user = $lares->{user};
					$server_ip = $lares->{server_ip};
					$osd->agi_output("FFFFFFFFFF vla OR SELECT |" . $osd->AGI->{accountcode} . "|$user|");
				}
			}

			$stmt = sprintf("UPDATE osdial_auto_calls SET status='XFER',stage='XFER-%s' WHERE callerid='%s';",$drop_timer,$osd->AGI->{accountcode});
			$osd->agi_output("|$stmt|") if ($DB);
			$affected_rows = $osd->sql_execute($stmt);
			$osd->agi_output("--    VDAD XFER : |$affected_rows|update of vac table: " . $osd->AGI->{accountcode});

			if ($osd->{settings}{enable_queuemetrics_logging} > 0) {
				$osd->sql_connect('QM',$osd->{settings}{queuemetrics_dbname},$osd->{settings}{queuemetrics_server_ip},'3306',$osd->{settings}{queuemetrics_login},$osd->{settings}{queuemetrics_pass});
				$stmt = sprintf("INSERT INTO queue_log SET partition='P01',time_id='%s',call_id='%s',queue='%s',agent='NONE',verb='ENTERQUEUE',data2='%s',serverid='%s';",$secX,$osd->AGI->{accountcode},$oac->{campaign_id},$drop_timer,$osd->{settings}{queuemetrics_log_id});
				$osd->sql_disconnect('QM');
			}

			### format the remote server dialstring to get the call to the overflow agent meetme room
			my $remDIALstr;
			if($server_ip =~ m/(\S+)\.(\S+)\.(\S+)\.(\S+)/ and $server_ip ne $osd->{VARserver_ip}) {
				$remDIALstr = sprintf('%.3d*%.3d*%.3d*%.3d',$1,$2,$3,$4);
				if ($osd->{settings}{intra_server_protocol} eq 'IAX2') {
					$remDIALstr .= '#';
				} else {
					$remDIALstr .= '*';
				}
			}
			$remDIALstr .= $conf_exten;

			if ($conf_exten =~ /^87......$/) {
				$stmt=sprintf("INSERT INTO osdial_manager VALUES ('','','%s','NEW','N','%s','','Originate','%s','Channel: Local/%s\@%s','Context: %s','Exten: 487487','Priority: 1','Callerid: \"\" <0000000000>','Account: %s','','','','');", $SQLdate,$osd->{VARserver_ip},$osd->AGI->{accountcode},$remDIALstr,$osd->{server}{ext_context},$osd->{server}{ext_context},$osd->AGI->{accountcode});
				$affected_rows = $osd->sql_execute($stmt);
				$osd->agi_output("|$stmt|");
			}

			$osd->agi_output("exiting the VDAD app, transferring call to $remDIALstr");
			$osd->AGI->set_context($osd->{server}{ext_context});
			$osd->AGI->set_extension($remDIALstr);
			$osd->AGI->set_priority(1);

			$now_date_epoch = time();
			$now_date = $osd->get_datetime($now_date_epoch);
			$osd->agi_output("XXXXXXXXXX VDAD transferred: start|stop   $start_time|$now_date");
			exit;
		} else {
			$osd->agi_output("NNNNNNNNNN No agent record found!!!");
		}
	} else {
		$osd->agi_output("WWWWWWWW VDAD XFER REMOTE WAIT: |$rec_countWAIT|" . $oac->{campaign_id} . "|" . $osd->AGI->{channel} . "|" . $osd->AGI->{accountcode} . "|" . $osd->AGI->{uniqueid} . "|");
	}


	if ($drop_timer < 3) {
		### sleep for 23 hundredths of a second
		usleep(1*230*1000);
		$drop_timer += 0.25;
	} else {
		### sleep for 99 hundredths of a second
		usleep(1*990*1000);
		$drop_timer++;
	}

	$stmt = sprintf("UPDATE osdial_auto_calls SET stage='LIVE-%s' WHERE callerid='%s';",$drop_timer,$osd->AGI->{accountcode});
	$affected_rows = $osd->sql_execute($stmt);
	#$osd->agi_output("|$stmt|") if ($DB);
	#$osd->agi_output("--    VDAD : |$affected_rows|update of vac table: " . $osd->AGI->{accountcode});
}


if ($drop_timer >= $campaign->{drop_call_seconds}) {
	$now_date_epoch = time();
	$now_date = $osd->get_datetime($now_date_epoch);
	$CIDdate = $now_date;
	$CIDdate =~ s/\D//g;
	$CIDdate = substr($CIDdate,4,10);
	$SQLdate = $now_date;

	my $DROPexten;
	if ($drop_seconds < 1) {
		$drop_seconds = $campaign->{drop_call_seconds};

		if ($osd->{settings}{enable_queuemetrics_logging} > 0) {
			$osd->sql_connect('QM',$osd->{settings}{queuemetrics_dbname},$osd->{settings}{queuemetrics_server_ip},'3306',$osd->{settings}{queuemetrics_login},$osd->{settings}{queuemetrics_pass});
			$stmt = sprintf("INSERT INTO queue_log SET partition='P01',time_id='%s',call_id='%s',queue='%s',agent='NONE',verb='ENTERQUEUE',data2='%s',serverid='%s';",$secX,$osd->AGI->{accountcode},$oac->{campaign_id},'1',$osd->{settings}{queuemetrics_log_id});
			$osd->sql_disconnect('QM');
		}

		if ($campaign->{safe_harbor_message} =~ /Y/) {
			$DROPexten = $campaign->{safe_harbor_exten};
		} else {
			$campaign->{voicemail_ext} =~ s/\D//gi;
			$DROPexten = $osd->{server}{voicemail_dump_exten} . $campaign->{voicemail_ext} if (length($campaign->{voicemail_ext})>0);
		}
	}


	### use STDOUT to send call to proper DROP location
	my $VHqueryCID = "VH$CIDdate$DROPexten";

	if (length($DROPexten)>0) {	### if DROP extension is defined then send the dropped call there instead of hangup
		$osd->agi_output("exiting the VDAD app, transferring call to $DROPexten");
		$osd->AGI->set_context($osd->{server}{ext_context});
		$osd->AGI->set_extension($DROPexten);
		$osd->AGI->set_priority(1);
	} else {
		### insert a NEW record to the osdial_manager table to be processed
		$stmt = sprintf("INSERT INTO osdial_manager VALUES ('','','%s','NEW','N','%s','','Hangup','%s','Channel: %s','','','','','','','','','')",$SQLdate,$osd->{VARserver_ip},$VHqueryCID,$osd->AGI->{channel});
		$affected_rows = $osd->sql_execute($stmt);
		$osd->agi_output("|$stmt|") if ($DB);
		$osd->agi_output("--    VDAD call_hungup timout: |$VHqueryCID|$DROPexten|" . $osd->AGI->{channel} . "|insert to osdial_manager");
	}

	$stmt = sprintf("DELETE FROM osdial_auto_calls WHERE callerid='%s' ORDER BY call_time DESC LIMIT 1;",$osd->AGI->{accountcode});
	$affected_rows = $osd->sql_execute($stmt);
	$osd->agi_output("|$stmt|") if ($DB);
	$osd->agi_output("--    VDAD vac record deleted: |$affected_rows|" . $oac->{campaign_id} . "|");

	$stmt = sprintf("UPDATE osdial_log SET status='DROP',end_epoch='%s',length_in_sec='%s',term_reason='ABANDON' WHERE uniqueid='%s';",$now_date_epoch,$drop_seconds,$osd->AGI->{uniqueid});
	$affected_rows = $osd->sql_execute($stmt);
	$osd->agi_output("|$stmt|");
	$osd->agi_output("--    VDAD osdial_log update: |$affected_rows|" . $osd->AGI->{uniqueid});

	$stmt = sprintf("UPDATE osdial_list SET status='DROP' WHERE lead_id='%s';",$CIDlead_id);
	$affected_rows = $osd->sql_execute($stmt);
	$osd->agi_output("|$stmt|");
	$osd->agi_output("--    VDAD osdial_list update: |$affected_rows|$CIDlead_id");
}
exit;
