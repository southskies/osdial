diff -Naur asterisk-1.6.2.20-orig/channels/chan_sip.c asterisk-1.6.2.20/channels/chan_sip.c
--- asterisk-1.6.2.20-orig/channels/chan_sip.c	2011-06-28 16:06:16.000000000 -0400
+++ asterisk-1.6.2.20/channels/chan_sip.c	2011-11-27 04:11:17.000000000 -0500
@@ -1066,6 +1066,7 @@
 	int notifyhold;			/*!< Send notifications on hold */
 	enum notifycid_setting notifycid; /*!< Send CID with ringing notifications */
 	enum transfermodes allowtransfer;	/*!< SIP Refer restriction scheme */
+	int enable_netborder_cpa;	/*!< Enable Sangoma Netborder CPA */
 	int allowsubscribe;	        /*!< Flag for disabling ALL subscriptions, this is FALSE only if all peers are FALSE 
 					    the global setting is in globals_flags[1] */
 	char realm[MAXHOSTNAMELEN]; 		/*!< Default realm */
@@ -1683,6 +1684,7 @@
 	int autokillid;				/*!< Auto-kill ID (scheduler) */
 	int t38id;                              /*!< T.38 Response ID */
 	enum transfermodes allowtransfer;	/*!< REFER: restriction scheme */
+	int enable_netborder_cpa;	/*!< Enable Sangoma Netborder CPA */
 	struct sip_refer *refer;		/*!< REFER: SIP transfer data structure */
 	enum subscriptiontype subscribed;	/*!< SUBSCRIBE: Is this dialog a subscription?  */
 	int stateid;				/*!< SUBSCRIBE: ID for devicestate subscriptions */
@@ -1873,6 +1875,7 @@
 	int t38_maxdatagram;		/*!< T.38 FaxMaxDatagram override */
 	int busy_level;			/*!< Level of active channels where we signal busy */
 	enum transfermodes allowtransfer;	/*! SIP Refer restriction scheme */
+	int enable_netborder_cpa;	/*!< Enable Sangoma Netborder CPA */
 	struct ast_codec_pref prefs;	/*!<  codec prefs */
 	int lastmsgssent;
 	unsigned int sipoptions;	/*!<  Supported SIP options */
@@ -2546,6 +2549,7 @@
 static int sip_reinvite_retry(const void *data);
 
 /*--- Parsing SIP requests and responses */
+static int check_cpd_results(struct sip_pvt *p, struct sip_request *req);
 static void append_date(struct sip_request *req);	/* Append date to SIP packet */
 static int determine_firstline_parts(struct sip_request *req);
 static const struct cfsubscription_types *find_subscription_type(enum subscriptiontype subtype);
@@ -5477,6 +5481,7 @@
 	dialog->callgroup = peer->callgroup;
 	dialog->pickupgroup = peer->pickupgroup;
 	dialog->allowtransfer = peer->allowtransfer;
+	dialog->enable_netborder_cpa = peer->enable_netborder_cpa;
 	dialog->jointnoncodeccapability = dialog->noncodeccapability;
 	dialog->rtptimeout = peer->rtptimeout;
 	dialog->peerauth = peer->auth;
@@ -7221,6 +7226,66 @@
 	return _default;
 }
 
+/*! \brief Check for a CPD-Result
+ *  This looks for a CPD-Result in the sip_request 
+ *  and throws a manager event if it finds one
+ */
+static int check_cpd_results(struct sip_pvt *p, struct sip_request *req) {
+	const char *cpar = get_header(req, "CPD-Result");
+	const char *cpadr = get_header(req, "X-Netborder-Detailed-CPD-Result-v2-0");
+	const char *cpacid = get_header(req, "X-Netborder-Call-ID");
+	const char *cparid = get_header(req, "X-Netborder-Cpa-Reference-ID");
+	const char *cpacamp = get_header(req, "X-Netborder-Cpa-Campaign-Name");
+	/* See if NetBorder had anything to say */
+	if (!(ast_strlen_zero(cpar))) {
+		if (p->owner) {
+			/* If so throw a manager event with the result */
+			manager_event(
+				EVENT_FLAG_SYSTEM, 
+				"CPAResult", 
+				"Channeltype: SIP\r\n"
+				"Channel: %s\r\n"
+				"Accountcode: %s\r\n"
+				"Uniqueid: %s\r\n"
+				"CPAResult: %s\r\n"
+				"CPADetailedResult: %s\r\n"
+				"CPACallID: %s\r\n"
+				"CPAReferenceID: %s\r\n"
+				"CPACampaignName: %s\r\n",
+				p->owner->name,
+				p->owner->accountcode,
+				p->owner->uniqueid,
+				cpar,
+				S_OR(cpadr, ""),
+				S_OR(cpacid, ""),
+				S_OR(cparid, ""),
+				S_OR(cpacamp, "")
+			);
+		} else {  
+			/* Apparently we can have a CPD-Result and no owner, better not crash it though */
+			manager_event(
+				EVENT_FLAG_SYSTEM,
+				"CPAResult",
+				"Channeltype: SIP\r\n"
+				"Channel: UNKNOWN\r\n"
+				"Accountcode: UNKNOWN\r\n"
+				"Uniqueid: UNKNOWN\r\n"
+				"CPAResult: %s\r\n"
+				"CPADetailedResult: %s\r\n"
+				"CPACallID: %s\r\n"
+				"CPAReferenceID: %s\r\n"
+				"CPACampaignName: %s\r\n",
+				cpar,
+				S_OR(cpadr, ""),
+				S_OR(cpacid, ""),
+				S_OR(cparid, ""),
+				S_OR(cpacamp, "")
+			);
+		}
+	} 
+	return 0;
+}
+
 static const char *__get_header(const struct sip_request *req, const char *name, int *start)
 {
 	int pass;
@@ -7599,6 +7664,7 @@
 	ast_string_field_set(p, mohsuggest, default_mohsuggest);
 	p->capability = global_capability;
 	p->allowtransfer = sip_cfg.allowtransfer;
+	p->enable_netborder_cpa = sip_cfg.enable_netborder_cpa;
 	if ((ast_test_flag(&p->flags[0], SIP_DTMF) == SIP_DTMF_RFC2833) ||
 	    (ast_test_flag(&p->flags[0], SIP_DTMF) == SIP_DTMF_AUTO))
 		p->noncodeccapability |= AST_RTP_DTMF;
@@ -11257,6 +11323,7 @@
 	const char *n = NULL;	/* XXX what is this, exactly ? */
 	const char *d = NULL;	/* domain in from header */
 	const char *urioptions = "";
+	const char *netbordercpd = ";cpd=on";  /* string used to enable NetBorder's CPD */
 	int ourport;
 
 	if (ast_test_flag(&p->flags[0], SIP_USEREQPHONE)) {
@@ -11346,6 +11413,9 @@
 	/* If custom URI options have been provided, append them */
 	if (p->options && !ast_strlen_zero(p->options->uri_options))
 		ast_str_append(&invite, 0, ";%s", p->options->uri_options);
+
+	/* Tell NetBorder to enable CPD */
+	if (p->enable_netborder_cpa) ast_str_append(&invite, 0, "%s", netbordercpd);
 	
  	/* This is the request URI, which is the next hop of the call
  		which may or may not be the destination of the call
@@ -16060,6 +16130,7 @@
 		if (!ast_strlen_zero(peer->accountcode))
 			ast_cli(fd, "  Accountcode  : %s\n", peer->accountcode);
 		ast_cli(fd, "  AMA flags    : %s\n", ast_cdr_flags2str(peer->amaflags));
+		ast_cli(fd, "  Netborder CPA: %s\n", peer->enable_netborder_cpa?"Y":"N");
 		ast_cli(fd, "  Transfer mode: %s\n", transfermode2str(peer->allowtransfer));
 		ast_cli(fd, "  CallingPres  : %s\n", ast_describe_caller_presentation(peer->callingpres));
 		if (!ast_strlen_zero(peer->fromuser))
@@ -16181,6 +16252,7 @@
 		astman_append(s, "%s\r\n", ast_print_group(buffer, sizeof(buffer), peer->pickupgroup));
 		peer_mailboxes_to_str(&mailbox_str, peer);
 		astman_append(s, "VoiceMailbox: %s\r\n", mailbox_str->str);
+		astman_append(s, "Netborder CPA: %s\n", peer->enable_netborder_cpa?"Y":"N");
 		astman_append(s, "TransferMode: %s\r\n", transfermode2str(peer->allowtransfer));
 		astman_append(s, "LastMsgsSent: %d\r\n", peer->lastmsgssent);
 		astman_append(s, "Call-limit: %d\r\n", peer->call_limit);
@@ -16328,6 +16400,7 @@
 		if (!ast_strlen_zero(user->accountcode))
 			ast_cli(a->fd, "  Accountcode  : %s\n", user->accountcode);
 		ast_cli(a->fd, "  AMA flags    : %s\n", ast_cdr_flags2str(user->amaflags));
+		ast_cli(a->fd, "  Netborder CPA: %s\n", user->enable_netborder_cpa?"Y":"N");
 		ast_cli(a->fd, "  Transfer mode: %s\n", transfermode2str(user->allowtransfer));
 		ast_cli(a->fd, "  MaxCallBR    : %d kbps\n", user->maxcallbitrate);
 		ast_cli(a->fd, "  CallingPres  : %s\n", ast_describe_caller_presentation(user->callingpres));
@@ -16736,6 +16809,7 @@
 				sip_cfg.notifycid == IGNORE_CONTEXT ? " (Ignoring context)" : "");
 	}
 	ast_cli(a->fd, "  Notify hold state:      %s\n", cli_yesno(sip_cfg.notifyhold));
+	ast_cli(a->fd, "  Enable Netborder CPA:   %s\n", sip_cfg.enable_netborder_cpa?"Y":"N");
 	ast_cli(a->fd, "  SIP Transfer mode:      %s\n", transfermode2str(sip_cfg.allowtransfer));
 	ast_cli(a->fd, "  Max Call Bitrate:       %d kbps\n", default_maxcallbitrate);
 	ast_cli(a->fd, "  Auto-Framing:           %s\n", cli_yesno(global_autoframing));
@@ -17122,6 +17196,7 @@
 			ast_cli(a->fd, "  MaxCallBR:              %d kbps\n", cur->maxcallbitrate);
 			ast_cli(a->fd, "  Theoretical Address:    %s:%d\n", ast_inet_ntoa(cur->sa.sin_addr), ntohs(cur->sa.sin_port));
 			ast_cli(a->fd, "  Received Address:       %s:%d\n", ast_inet_ntoa(cur->recv.sin_addr), ntohs(cur->recv.sin_port));
+			ast_cli(a->fd, "  Enable Netborder CPA:   %s\n", cur->enable_netborder_cpa?"Y":"N");
 			ast_cli(a->fd, "  SIP Transfer mode:      %s\n", transfermode2str(cur->allowtransfer));
 			ast_cli(a->fd, "  NAT Support:            %s\n", nat2str(ast_test_flag(&cur->flags[0], SIP_NAT)));
 			ast_cli(a->fd, "  Audio IP:               %s %s\n", ast_inet_ntoa(cur->redirip.sin_addr.s_addr ? cur->redirip.sin_addr : cur->ourip.sin_addr), cur->redirip.sin_addr.s_addr ? "(Outside bridge)" : "(local)" );
@@ -19016,6 +19091,9 @@
 		return;
 	}
 
+	/* Check if NetBorder had anything to say */
+	check_cpd_results(p, req);
+
 	if (p->relatedpeer && p->method == SIP_OPTIONS) {
 		/* We don't really care what the response is, just that it replied back. 
 		   Well, as long as it's not a 100 response...  since we might
@@ -24454,6 +24532,7 @@
 	peer->rtpholdtimeout = global_rtpholdtimeout;
 	peer->rtpkeepalive = global_rtpkeepalive;
 	peer->allowtransfer = sip_cfg.allowtransfer;
+	peer->enable_netborder_cpa = sip_cfg.enable_netborder_cpa;
 	peer->autoframing = global_autoframing;
 	peer->t38_maxdatagram = global_t38_maxdatagram;
 	peer->qualifyfreq = global_qualifyfreq;
@@ -24824,6 +24903,8 @@
 				peer->callgroup = ast_get_group(v->value);
 			} else if (!strcasecmp(v->name, "allowtransfer")) {
 				peer->allowtransfer = ast_true(v->value) ? TRANSFER_OPENFORALL : TRANSFER_CLOSED;
+			} else if (!strcasecmp(v->name, "enable-netborder-cpa")) {
+				peer->enable_netborder_cpa = ast_true(v->value);
 			} else if (!strcasecmp(v->name, "pickupgroup")) {
 				peer->pickupgroup = ast_get_group(v->value);
 			} else if (!strcasecmp(v->name, "allow")) {
@@ -25312,6 +25393,7 @@
 	global_rtpholdtimeout = 0;
 	global_rtpkeepalive = DEFAULT_RTPKEEPALIVE;
 	sip_cfg.allowtransfer = TRANSFER_OPENFORALL;	/* Merrily accept all transfers by default */
+	sip_cfg.enable_netborder_cpa = 0;	/* Netborder CPA - Disable by default */
 	sip_cfg.rtautoclear = 120;
 	ast_set_flag(&global_flags[1], SIP_PAGE2_ALLOWSUBSCRIBE);	/* Default for all devices: TRUE */
 	ast_set_flag(&global_flags[1], SIP_PAGE2_ALLOWOVERLAP);		/* Default for all devices: TRUE */
@@ -25406,6 +25488,8 @@
 				ast_log(LOG_WARNING, "'%s' must not contain spaces at line %d.  Using default.\n", v->value, v->lineno);
 		} else if (!strcasecmp(v->name, "allowtransfer")) {
 			sip_cfg.allowtransfer = ast_true(v->value) ? TRANSFER_OPENFORALL : TRANSFER_CLOSED;
+		} else if (!strcasecmp(v->name, "enable-netborder-cpa")) {
+			sip_cfg.enable_netborder_cpa = ast_true(v->value);
 		} else if (!strcasecmp(v->name, "rtcachefriends")) {
 			ast_set2_flag(&global_flags[1], ast_true(v->value), SIP_PAGE2_RTCACHEFRIENDS);	
 		} else if (!strcasecmp(v->name, "rtsavesysname")) {
